@using Sandbox;
@using Sandbox.UI;
@using Sandbox.Network;
@using System.Threading.Tasks;
@inherits PanelComponent

<root style="flex-direction: column;">
	<div class="top-section">
		<div style="position: absolute; right: 0; flex-direction: column; padding: 15px;">
			<div class="social-icon red">
				<svg Src="ui/svg/turnoff.svg"></svg>
			</div>
			<div class="social-icon matte">
				<svg Src="ui/svg/discord.svg"></svg>
			</div>
		</div>
	</div>

	<div class="controls">
		<div class="game-title">
			Prop Hunt
		</div>

		<div class="buttons">
			<div class="button" onclick="@OpenLobbyManager">
				Play
			</div>
			<div class="settings-icon">
				<svg Src="ui/svg/cog.svg"></svg>
			</div>
		</div>

		@* <div class="button" onclick=@(() => Game.Overlay.ShowBinds())>Settings</div>
		<div class="button" onclick=@Copy>@DiscordCopyText</div>
		<div class="button" onclick=@(() => Game.Close())>Quit</div> *@
	</div>



	@if (ShowLobbyManager)
	{
		<RootLobbyManager></RootLobbyManager>
	}
</root>

@code
{
	[Property] int minPlayers = 2;
	[Property] public bool ShowLobbyManager { get; set; }
	public List<LobbyInformation> Lobbies { get; set; } = new();
	[Property] public bool Refreshing { get; set; } = false;
	[Property] public SceneFile GameScene { get; set; }
	[Property] public LobbySettings lobbySettings { get; set; } = new();
	public string DiscordCopyText { get; set; } = "Discord";

	public void Copy()
	{
		Clipboard.SetText("https://discord.com/invite/zuZfyRhTa8");
		DiscordCopyText = "Copied!";
	}

	protected override void OnStart()
	{
		_ = FetchLobbies();
	}

	void OnPackageSelected(Package package)
	{
		LaunchArguments.Map = package.FullIdent;
		//Game.ActiveScene.LoadFromFile("scenes/newmap.scene");
	}

	void StartLobby()
	{
		LobbySettings.SetLobbySettings(lobbySettings);

		Game.ActiveScene.LoadFromFile("scenes/newmap.scene");
	}

	void LeaveGame()
	{
		Game.Close();
	}

	void OpenLobbyManager()
	{
		ShowLobbyManager = !ShowLobbyManager;
	}
	protected override void OnUpdate()
	{
		FileSystem.Data.WriteAllText("MinPlayers", minPlayers.ToString());

		if (Input.EscapePressed)
		{
			Input.EscapePressed = false;
		}
	}
	void ConnectToLobby(LobbyInformation lobby)
	{
		GameNetworkSystem.Connect(lobby.LobbyId);
	}

	public async Task FetchLobbies()
	{
		while (true)
		{
			Refreshing = true;
			StateHasChanged();
			Lobbies = await Networking.QueryLobbies();
			Refreshing = false;
			StateHasChanged();
			await GameTask.DelayRealtimeSeconds(5);
		}
	}


	/// <summary>
	/// the hash determines if the system should be rebuilt. If it changes, it will be rebuilt
	/// </summary>
	protected override int BuildHash() => System.HashCode.Combine(Time.Now);
}
