@using Sandbox;
@using Sandbox.UI;
@using Sandbox.Network;
@using System.Threading.Tasks;
@inherits PanelComponent

<root style="flex-direction: column;">
	<div class="top-section">
		<div style="position: absolute; right: 0; flex-direction: column; padding: 15px;">
			<div class="social-icon red">
				<svg Src="ui/svg/turnoff.svg"></svg>
			</div>
			<div class="social-icon matte">
				<svg Src="ui/svg/discord.svg"></svg>
			</div>
		</div>
	</div>

	<div class="controls">
		<div class="game-title">
			Prop Hunt
		</div>

		<div class="buttons">
			<div class="button" onclick="@OpenServerList">
				Play
			</div>
			<div class="settings-icon">
				<svg Src="ui/svg/cog.svg"></svg>
			</div>
		</div>

		@* <div class="button" onclick=@(() => Game.Overlay.ShowBinds())>Settings</div>
		<div class="button" onclick=@Copy>@DiscordCopyText</div>
		<div class="button" onclick=@(() => Game.Close())>Quit</div> *@
	</div>



	@if (ShowServerList)
	{
		<div class="serverlist">
			<div class="header">
				Lobbies
			</div>
			@if (Refreshing)
			{
				<div class="server">
					<div class="server-name">Refreshing...</div>
				</div>
			}
			else if (Lobbies.Count == 0)
			{
				<div class="server">
					<div class="server-name">No servers found, create one</div>
				</div>
			}
			@foreach (var lobby in Lobbies)
			{
				<div class="server" style="flex-wrap: nowrap;">
					<img src="@Package.Fetch( lobby.Map, true ).Result?.Thumb"
						style="width: 64px; height: 64px; border-radius: 100px; margin-right: 10px;" />
					<div class="server-name" style="font-size: 20px;">@Package.Fetch(lobby.Map, true).Result?.Title</div>
					<div class="server-name" style="font-size: 24px">@lobby.Name</div>
					<div class="server-players">@lobby.Members</div>
					<div class="server-join" onclick="@( () => ConnectToLobby( lobby ) )">Join</div>
				</div>
			}
		</div>
	}
	@if (ShowMapList)
	{
		<div class="maplist">
			<PackageList style="color: white; background-color: rgba(0,0,0,0.8);" ShowFilters="@true" Query="type:map +prophunt sort:trending"
				OnSelected="@OnPackageSelected" Take=@(50) />

			<div class="lobbysettings" style="">
				<div class="chosen-map">
					@if (String.IsNullOrWhiteSpace(LaunchArguments.Map))
					{
						<div style="justify-content: center">Select A Map</div>
					}
					else
					{
						<img class="thumb" src=@Package.Fetch( LaunchArguments.Map, true ).Result.Thumb />
						<h1 style="justify-content: center; font-size: 24px;">@Package.Fetch(LaunchArguments.Map,
					true).Result.Title</h1>
					}

				</div>

				<div class="slider">
					<div class="slider-label">Forced Taunt Cooldown</div>
					<TextEntry Value:bind=@( lobbySettings.ForcedTauntTime ) Numeric=@true />
				</div>
				<div class="slider">
					<div class="slider-label">Taunt Cooldown</div>
					<TextEntry Value:bind="@lobbySettings.TauntCoolDownTime" Numeric=@true />
				</div>
				<div class="slider">
					<div class="slider-label">Players needed to start</div>
					<TextEntry Value:bind="@lobbySettings.PlayersNeededToStart" Numeric=@true MinValue=@( 1f ) MaxValue=@(
					64f ) />
				</div>
				<div class="slider">
					<div class="slider-label">Round Time</div>
					<TextEntry Value:bind="@lobbySettings.RoundTime" Numeric=@true MinValue=@( 240f ) MaxValue=@( 360f ) />
				</div>
				<div class="slider">
					<div class="slider-label">Preround Time</div>
					<TextEntry Value:bind="@lobbySettings.PreRoundTime" Numeric=@true MinValue=@( 240f ) MaxValue=@( 360f
					) />
				</div>
				<div class="slider">
					<div class="slider-label">Prop Health</div>
					<TextEntry Value:bind="@lobbySettings.PropHealth" Numeric=@true MinValue=@( 1 ) MaxValue=@( 1000 ) />
				</div>
				<div class="slider">
					<div class="slider-label">Hunter Health</div>
					<TextEntry Value:bind="@lobbySettings.HunterHealth" Numeric=@true MinValue=@( 1 ) MaxValue=@( 1000 ) />
				</div>


				@if (lobbySettings.HunterPropGrabMode == HuntersPropGrabbing.Bleed)
				{
					<div class="slider">
						<div class="slider-label">Bleed amount</div>
						<TextEntry Value:bind="@lobbySettings.BleedAmount" Numeric=@true />
					</div>
				}

				<div class="slider">
					<div class="slider-label">Hunters can grab props</div>
					<DropDown style="font-size: 10px;" Value:bind="@lobbySettings.HunterPropGrabMode" />
				</div>

				<div class="slider">
					<div class="slider-label">Allow map voting</div>
					<SwitchControl Value:bind="@lobbySettings.AllowMapVoting" />
				</div>
				@if (lobbySettings.AllowMapVoting)
				{
					<div class="slider">
						<div class="slider-label">Rounds until map vote</div>
						<TextEntry Value:bind="@lobbySettings.RoundCount" Numeric=@true MinValue=@( 120f ) MaxValue=@( 360f ) />
					</div>
				}



			</div>

			<div style="align-items: center; justify-content: center; border-radius: 20px; border: solid 2px rgb(0, 255, 41); width: 200px; background-color: rgba(73, 255, 44, 1); color: white; text-stroke: 4px black; font-size: 80px; opacity: 0.6;" onclick=@( () => StartLobby()
			 )>
				<i>play_arrow</i>
			</div>
		</div>

	}
</root>

@code
{
	[Property] int minPlayers = 2;
	[Property] public bool ShowServerList { get; set; }
	public List<LobbyInformation> Lobbies { get; set; } = new();
	[Property] public bool Refreshing { get; set; } = false;
	[Property] public bool ShowMapList { get; set; } = false;
	[Property] public SceneFile GameScene { get; set; }
	[Property] public LobbySettings lobbySettings { get; set; } = new();
	public string DiscordCopyText { get; set; } = "Discord";

	public void Copy()
	{
		Clipboard.SetText("https://discord.com/invite/zuZfyRhTa8");
		DiscordCopyText = "Copied!";
	}

	protected override void OnStart()
	{
		_ = FetchLobbies();
	}
	void CreateNewGame()
	{
		ShowMapList = !ShowMapList;
		ShowServerList = false;
	}
	void OnPackageSelected(Package package)
	{
		LaunchArguments.Map = package.FullIdent;
		//Game.ActiveScene.LoadFromFile("scenes/newmap.scene");
	}

	void StartLobby()
	{
		LobbySettings.SetLobbySettings(lobbySettings);

		Game.ActiveScene.LoadFromFile("scenes/newmap.scene");
	}

	void LeaveGame()
	{
		Game.Close();
	}

	void OpenServerList()
	{
		ShowServerList = !ShowServerList;
		ShowMapList = false;
	}
	protected override void OnUpdate()
	{
		FileSystem.Data.WriteAllText("MinPlayers", minPlayers.ToString());

		if (Input.EscapePressed)
		{
			Input.EscapePressed = false;
		}
	}
	void ConnectToLobby(LobbyInformation lobby)
	{
		GameNetworkSystem.Connect(lobby.LobbyId);
	}

	public async Task FetchLobbies()
	{
		while (true)
		{
			Refreshing = true;
			StateHasChanged();
			Lobbies = await Networking.QueryLobbies();
			Refreshing = false;
			StateHasChanged();
			await GameTask.DelayRealtimeSeconds(5);
		}
	}


	/// <summary>
	/// the hash determines if the system should be rebuilt. If it changes, it will be rebuilt
	/// </summary>
	protected override int BuildHash() => System.HashCode.Combine(Time.Now);
}
