@using Sandbox;
@using Sandbox.UI;
@using PropHunt;
@using Sandbox.UI.Panels.Chat
@inherits PanelComponent

@if (Manager is not null)
{
	<root style="pointer-events: @(ShowMapVoting ? "all" : "none")">
		<div class="round-timer">
			@if (Manager.RoundState == GameState.WaitingForPlayers)
			{
				<div class="title"
					style="background-color: rgba(0, 0, 0, 0.5); font-weight: 800; font-size: 25px; border-bottom-left-radius: 20px;">
					@Format(TimeSpan.FromSeconds(
									Manager.TimeSinceRoundStateChanged.Relative.CeilToInt()))</div>
			}
			else
			{
				<div class="title"
					 style="background-color: rgba(0, 0, 0, 0.5); font-weight: 800; font-size: 25px; border-bottom-left-radius: 20px;">
					@Format(TimeSpan.FromSeconds(
									Manager.RoundLength - Manager.TimeSinceRoundStateChanged.Relative.CeilToInt()))</div>
			}
			<div class="title" style="background-color: rgba(0, 0, 0, 0.7); font-size: 24px; border-bottom-right-radius: 20px;">@Manager.RoundStateText</div>
		</div>
		@if (Player.Local is not null)
		{
			<div class="title" style="position: absolute; top: 100px; font-size: 25px;">
				Props will force taunt in
				<div class="title" style="position: absolute; top: 35px; font-size: 30px;">@Format(TimeSpan.FromSeconds(
			Manager.LobbySettings.ForcedTauntTime - Manager.TimeSinceLastForceTaunt.Relative.CeilToInt()))</div>
			</div>

			<div style="position: absolute; left: 12px; bottom: 12px;" class="health">
				+ <strong>@(Player.Local.Health)</strong>
			</div>
		}
		@if (Player.Local?.Inventory is not null && Player.Local?.TeamComponent.TeamName == Team.Hunters.ToString())
		{
			<div class="inventory">
				<div class="item @(Player.Local?.Inventory.ActiveIndex == 0 ? "active" : "")">
					<img class="number" src=@CreateInputGlyph( "slot1" ).ResourcePath>
					<div class="weapon">Pistol</div>
				</div>
				<div class="item @(Player.Local?.Inventory.ActiveIndex == 1 ? "active" : "")">
					<img class="number" src=@CreateInputGlyph( "slot2" ).ResourcePath>
					<div class="weapon">Knife</div>
				</div>
				<div class="item @(Player.Local?.Inventory.ActiveIndex == 2 ? "active" : "")">
					<img class="number" src=@CreateInputGlyph( "slot3" ).ResourcePath>
					<div class="weapon">MP5</div>
				</div>
				<div class="item @( Player.Local?.Inventory.ActiveIndex == 3 ? "active" : "" )">
					<img class="number" src=@CreateInputGlyph( "slot4" ).ResourcePath>
					<div class="weapon">Shotgun</div>
				</div>

			</div>
		}

		<PopupList />
		<Scoreboard />
		<Crosshair />
		<InputHints />
		<HudHints />

		@if (Player.Local?.TeamComponent.TeamName == Team.Hunters.ToString() && Player.Local?.Inventory.ActiveItem is not
				null)
		{
			//SUPER SHIT, needs proper styling
			<div
				style="position: absolute; bottom: 10px; left: 10px; font-family: Poppins; font-size: 24px; padding: 10px 20px; color: white; font-weight: bolder;">
				<div>@Player.Local.Inventory?.ActiveAmmo</div>
				<div>/</div>
				<div>@((int)Player.Local.AmmoContainer?.Ammo)</div>
			</div>
		}






		<div class="right"></div>
		@if (ShowMapVoting)
		{
			<PackageList ShowFilters="@true" Query="type:map sort:trending" OnSelected="@OnPackageSelected" Take=@(50) />
		}
	</root>
}


@code
{
	public static PropHuntUI Instance { get; set; } = new();

	public PropHuntManager Manager { get; set; }
	public Inventory Inventory { get; set; }
	public TeamComponent TeamComponent { get; set; }
	public ChatBox Chat { get; set; }

	[Property] public bool ShowMapVoting { get; set; } = true;

	protected override void OnAwake()
	{
		Instance = this;
	}

	protected override void OnStart()
	{
		Manager = Scene.GetAllComponents<PropHuntManager>().FirstOrDefault();
		Inventory = Scene.GetAllComponents<Inventory>().FirstOrDefault(x => !x.IsProxy);
		TeamComponent = Scene.GetAllComponents<TeamComponent>().FirstOrDefault();
	}
	void OnPackageSelected(Package package)
	{
		var mapSelector = Scene.GetAllComponents<MapChanger>().FirstOrDefault();
		mapSelector?.LoadMap(package.FullIdent);
		ShowMapVoting = false;
	}

	public static Texture CreateInputGlyph(string keybind)
	{
		var inputGlyph = Input.GetGlyph(keybind, InputGlyphSize.Medium, false);
		return inputGlyph;
	}

	public static string Format(TimeSpan timespan)
	{
		var format = timespan.Hours >= 1 ? @"h\:mm\:ss" : @"m\:ss";
		return timespan.ToString(format);
	}

	/// <summary>
	/// the hash determines if the system should be rebuilt. If it changes, it will be rebuilt
	/// </summary>
	protected override int BuildHash() => System.HashCode.Combine(Time.Now);
}
